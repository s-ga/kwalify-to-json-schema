<!-- Do not update README.md but doc_template/README.md.erb and execute rake doc:update-->
<% example_file = File.join(template_dir, "kwalify_source_example.yaml")
   example = File.read example_file %>

# kwalify_to_json_schema [![Gem Version](https://badge.fury.io/rb/kwalify_to_json_schema.svg)](https://badge.fury.io/rb/kwalify_to_json_schema)
Kwalify schemas to JSON schemas conversion

This gem allows to convert [Kwalify](http://www.kuwata-lab.com/kwalify/) schemas to [JSON schema](https://json-schema.org/).

## Installation

```console
gem install kwalify_to_json_schema
``` 

## Limitations

The current implementation has the following limitations:

<%= Limitations.markdown %>

## Command line

The conversion can be done using the `kwalify_to_json_schema` command.
To get help:

```console
kwalify_to_json_schema help

<%= Cli.help -%>
```

Help for `convert` command:
```console
kwalify_to_json_schema help

<%= Cli.help "convert" -%>
```


### Converting a single file

The destination file extension decides if the resulting JSON schema is in JSON or YAML.

Source Kwalify file used as example:
```yaml
<%= example -%>
```

#### Convert to JSON format
```console
kwalify_to_json_schema convert kwalify_schema.yaml json_schema.json
```

Will produce:

```json
<%= KwalifyToJsonSchema.convert_string(example, "yaml", "json") %>
```


#### Convert to YAML format
```console
kwalify_to_json_schema convert kwalify_schema.yaml json_schema.yaml
```

Will produce:

```yaml
<%= KwalifyToJsonSchema.convert_string(example, "yaml", "yaml") %>
```

### Converting a directory

#### Convert to JSON format

```console
kwalify_to_json_schema convert_dir source_dir dest_dir --format json
```

#### Convert to YAML format

```console
kwalify_to_json_schema convert_dir source_dir dest_dir --format yaml
```

### Custom processing

It could happen what your schema are not stored as it and may require some transformation.
It is possible to provide a custom processing class in order to pre and post process the schemas.

Example of Kwalify schemas that needs processing:
```yaml
my_custom_key:
  type: map
  desc: Test 'enum', 'pattern' and 'range'
  mapping:
    str_enum:
      type: str
```

The schema is nested under the `my_custom_key` key.
We have to remove it before processing and want to keep it after the conversion.

The following custom class will do the job:
```ruby
# Customization of Kwalify to JSON schema
class CustomProcessing
  def preprocess(kwalify_schema)
    # Remove and keep the wrapping name
    head = kwalify_schema.first
    @name = head.first
    head.last
  end

  def postprocess(json_schema)
    # Restore the wrapping name
    { @name => json_schema }
  end
end
```

Let's store it in the `name_wrapping_custom_processing.rb` file.
We can now convert using:
```console
kwalify_to_json_schema convert --custom_processing kwalify_to_json_schema.rb kwalify_schema.yaml json_schema.yaml
```

Result will be:
```yaml
my_custom_key:
  "$schema": http://json-schema.org/draft-04/schema#
  description: Test 'enum', 'pattern' and 'range'
  type: object
  additionalProperties: false
  properties:
    str_enum:
      type: string
      enum:
        - A
        - B
        - C
```

## Using the API

Conversion can also be done using directly the Ruby API.

```ruby
require 'kwalify_to_json_schema'

# Convert to JSON format
KwalifyToJsonSchema.convert_file("kwalify_schema.yaml", "json_schema.json")

# Convert to YAML format
KwalifyToJsonSchema.convert_file("kwalify_schema.yaml", "json_schema.yaml")

# Specify the identifier
KwalifyToJsonSchema.convert_file("kwalify_schema.yaml", "json_schema.json", { id: "schema/example.json" })
```

### Options

The following options are available:

<%= Options.markdown %>
